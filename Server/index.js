var http = require('http'),
    QRCode = require('qrcode'),
    https = require('https'),
    fs = require('fs'),
    nJwt = require('njwt'),
    secureRandom = require('secure-random'),
    crypto = require('crypto');
var assert = require('assert');
var MongoClient = require('mongodb').MongoClient;
dbURL = "mongodb://127.0.0.1:27017/whatsAuth";

const server = http.createServer(handlers).listen(8000);

function handlers(req, res) {
    assert(req, null, "error");
    res.write("abc");
    //res.writeHead(200);
    res.end();

}

//importing socket & bind it to server
var io = require('socket.io')(server);
io.on('connection', function (socket) {
    var agent = socket.handshake.headers['user-agent'].toLowerCase();
    var obj_info = {};

    if (agent.includes('android')) {
        obj_info['type'] = 'android';
        console.log('Android Id:' + socket.id)
    } else if (agent.includes('x11')) {
        obj_info['type'] = 'UNIX_Like';
        console.log('UNIX Like = ' + socket.id);
    } else if (agent.includes('windows')) {
        obj_info['type'] = 'Windows';
        console.log('Windows  = ' + socket.id);
    } else {
        obj_info['type'] = 'other';
        console.log('Other  = ' + socket.id);
    }
    obj_info['sid'] = socket.id;
    obj_info['other'] = socket.handshake;
    MongoClient.connect(dbURL, function (err, db) {

        db.collection('sockets').insertOne(obj_info);
        db.close();
    });
    console.log(socket.handshake);
    // Generate A QR and return base64
    socket.on('GenerateQR', function (callback) { // Angular Says.
        QRGen(callback, socket.id);
    });

// this obj,callback are form Android app which has obj.wsid
    socket.on('QRData', function (object, callback) {
        console.log("QR data called");
        MongoClient.connect(dbURL, function (err, db) {
            assert.equal(err, null);
            db.collection('qrinfo').findOne({'sid': object.wsid}, function (err, doc) {
                assert.equal(null, err);
                if (doc == null) {
                    callback('400')
                } else if (doc.qr.slice(13) == object.msg.slice(13)) {// Check if all except timestamp is equal
                    if ((+doc.qr.slice(0, 13) - +object.msg.slice(0, 13)) < 10000) {
                        console.log('STATUS 200 MATCHED');
                        callback('200');
                        socket.on('Auth0', function (info) {
                            // emit this generatedJWT based on user's mobile phone to the web client with timeout of 1 day
                            console.log('AUTH0 CALLED');
                            var xgen = generateJWT(info, socket.id, object.wsid);
                            console.log('SENT BY ANDROID');
                            console.log(info);
                            console.log('TOKEN GENERATED');
                            console.log(xgen);
                            io.to(object.wsid).emit('token', {'token': xgen, 'uid': info.number});
                            // assert.equal(null,err); from this point on whenever the user emits any other event always check if the passed token is valid or not.
                        })
                        ;
                    } else {
                        callback('400');
                    }
                    // On receiving this information mobile deviec emits the object with phone no and username from mailid
                } else {
                    // if it is not matched , it means QR was generated by some other means thus a hacking attempt disconnect that socket
                    console.log('STATUS 400 IF NOT MATCHED');
                    callback('400');
                }
            });
            db.close();
        });
    });

    socket.on('validate', ( function (info,callback) {
        verifyToken(info.token, info.uid, function (isverified) {
                console.log(isverified);
                callback(isverified);
            }
        );
    }));

    socket.on('disconnect', function () {
        console.log('disconnected ' + socket.id);
        remMongo(socket.id);
    });


});

//QR Generator function

function QRGen(callback, id) {
    // QR Code based on TimeStamp and socket ID
    var tempQR = new Date().valueOf().toString() + id;
    // Save tempQR corresponding to socket.id in mongodb

    MongoClient.connect(dbURL, function (err, db) {
        assert.equal(null, err);
        db.collection('qrinfo').update({'sid': id}, {'sid': id, 'qr': tempQR},{'upsert':true});
        db.close();
    });
    QRCode.toDataURL(tempQR + ',' + id, {errorCorrectionLevel: 'H'}, function (err, url) {
        if (err) console.log(err);
        callback(url);
    });
}

// Delete socket's stored values

function remMongo(id) {
    MongoClient.connect(dbURL, function (err, db) {
        assert.equal(null, err);
        //  if client disconnected remove his record
        db.collection('qrinfo').remove({'sid': id});
        db.close();
    });
}


// Generate a JWT Key

function generateJWT(info, asid, wsid) {
    var signingKey = secureRandom(256, {type: 'Buffer'});
    console.log(signingKey.toString('base64'));
    // save signingKey corresponding to sid in auth collection
    MongoClient.connect(dbURL, function (err, db) {
        assert.equal(null, err);
        // upsert QRCode
        db.collection('tokens').update({'uid': info.number}, {
            'uid': info.number,
            'key': signingKey.toString('base64')
        }, {'upsert': true}, function (err) {
            assert.equal(err, null);
        })
        ;
        db.close();
    })
    ;

    claims = {
        iss: "http://localhost:4200",
        uid: info.number,
        name: info.name,
        device_id: info.device_id,
        asid: asid,
        wsid: wsid,
    }
    var Jwt = nJwt.create(claims, signingKey);
    // If expiration is set true from user's cellphone then expire the token after 1 day.
    if (info.expire == "1") {
        Jwt.setExpiration(new Date().getTime() + (24 * 60 * 60 * 1000));
    }
    var token = Jwt.compact();
    return token;
}

// verify whether tampering or something has been done with the key
function verifyToken(token, uid, callback) {
    MongoClient.connect(dbURL, function (err, db) {
        db.collection('tokens').findOne({'uid': uid}, function (err, doc) {
            if (doc == null) {
                callback(false);
            }
            else {
                nJwt.verify(token, Buffer(doc.key, 'base64'), function (err, verifiedJwt) {
                    if (err) {
                        callback(false);
                        // Token has expired, has been tampered with, etc
                    } else {
                        console.log(verifiedJwt); // Will contain the header and body
                        callback(true);
                    }
                });
            }
            ;
        });
        db.close();
    });
}

exports.io = io;
exports.dbURL = dbURL;
